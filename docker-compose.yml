# docker-compose.yml (Complete version with all services)

version: '3.8'

services:
  # Redis for Celery message brokering and backend caching
  redis:
    image: "redis:7.2-alpine"
    container_name: aios-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # The main web server (Flask/SocketIO)
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios-web
    ports:
      - "8765:8765"
    env_file:
      - ./python-backend/.env
    volumes:
      - ./python-backend:/app
    depends_on:
      - redis
      - sandbox-manager # Ensures sandbox-manager starts before the web server

  # The Celery worker for background AI tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios-worker
    command: ["celery", "-A", "app.celery", "worker", "--loglevel=info", "--concurrency=4"]
    env_file:
      - ./python-backend/.env
    volumes:
      - ./python-backend:/app
    depends_on:
      - redis
      - web

  # Flower for monitoring Celery workers
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aios-flower
    command: ["celery", "-A", "app.celery", "flower", "--broker=redis://redis:6379/0"]
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker

  # --- NEW: The Sandbox Manager Service ---
  # This service manages creating, executing, and terminating sandbox containers.
  sandbox-manager:
    build:
      context: .
      dockerfile: sandbox_manager/Dockerfile
    container_name: aios-sandbox-manager
    ports:
      - "8000:8000"
    volumes:
      # CRITICAL: Mount the host's Docker socket into the container.
      # This allows the sandbox-manager to control the Docker daemon
      # to start and stop the actual sandbox containers.
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  redis_data: